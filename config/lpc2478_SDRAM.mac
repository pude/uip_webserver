DisableLCD()
{
  __writeMemory32(0x00000000, 0xFFE10C00, "Memory"); // Disable LCD hardware cursor
  __writeMemory32(0x00000000, 0xFFE10018, "Memory"); // Disable LCD contoller
}

sdram_init_init ()
{
__var Reg;
  // Assign pins to SDRAM controller
  //PINSEL5 |= BIN32(01010101,00000001,00000001,00010101);
  __writeMemory32(0x55010115, 0xE002C014, "Memory");
  //PINMODE5|= BIN32(10101010,00000010,00000010,00101010);
  __writeMemory32(0xAA02022A, 0xE002C054, "Memory");
  //PINSEL6  = BIN32(01010101,01010101,01010101,01010101);
  __writeMemory32(0x55555555, 0xE002C018, "Memory");
  //PINMODE6 = BIN32(10101010,10101010,10101010,10101010);
  __writeMemory32(0xAAAAAAAA, 0xE002C058, "Memory");
  //PINSEL7  = BIN32(01010101,01010101,01010101,01010101);
  __writeMemory32(0x55555555, 0xE002C01C, "Memory");
  //PINMODE7 = BIN32(10101010,10101010,10101010,10101010);
  __writeMemory32(0xAAAAAAAA, 0xE002C05C, "Memory");
  //PINSEL8 |= BIN32(00010101,01010101,01010101,01010101);
  __writeMemory32(0x15555555, 0xE002C020, "Memory");
  //PINMODE8|= BIN32(00101010,10101010,10101010,10101010);
  __writeMemory32(0x2AAAAAAA, 0xE002C060, "Memory");
  //PINSEL9 |= BIN32(00000000,00000100,00000000,00000000);
  __writeMemory32(0x00040000, 0xE002C024, "Memory");
  //PINMODE9|= BIN32(00000000,00001000,00000000,00000000);
  __writeMemory32(0x00080000, 0xE002C064, "Memory");

  // Init SDRAM controller
  // Enable EMC clock
  //PCONP_bit.PCEMC = 1;
  __writeMemory32((1UL << 11), 0xE01FC0C4, "Memory");
  //EMCCONTROL      = 1;         // enable EMC
  __writeMemory32(0x000000001, 0xFFE08000, "Memory");
  //EMCDINAMICRDCFG = 1;
  __writeMemory32(0x000000001, 0xFFE08028, "Memory");
  //EMCDYNAMICRASCAS0_bit.CAS = 3;
  //EMCDYNAMICRASCAS0_bit.RAS = 3;
  __writeMemory32((3UL << 0) | (3UL << 8), 0xFFE08104, "Memory");
  //EMCDYNAMICRP = P2C(SDRAM_TRP);
  __writeMemory32(0x00000002, 0xFFE08030, "Memory");
  //EMCDYNAMICRAS = P2C(SDRAM_TRAS);
  __writeMemory32(0x00000004, 0xFFE08034, "Memory");
  //EMCDYNAMICSREX = P2C(SDRAM_TXSR);
  __writeMemory32(0x00000005, 0xFFE08038, "Memory");
  //EMCDYNAMICAPR = SDRAM_TAPR;
  __writeMemory32(0x00000001, 0xFFE0803C, "Memory");
  //EMCDYNAMICDAL = SDRAM_TDAL+P2C(SDRAM_TRP);
  __writeMemory32(0x00000005, 0xFFE08040, "Memory");
  //EMCDYNAMICWR = SDRAM_TWR;
  __writeMemory32(0x00000003, 0xFFE08044, "Memory");
  //EMCDYNAMICRC = P2C(SDRAM_TRC);
  __writeMemory32(0x00000005, 0xFFE08048, "Memory");
  //EMCDYNAMICRFC = P2C(SDRAM_TRFC);
  __writeMemory32(0x00000005, 0xFFE0804C, "Memory");
  //EMCDYNAMICXSR = P2C(SDRAM_TXSR);
  __writeMemory32(0x00000005, 0xFFE08050, "Memory");
  //EMCDYNAMICRRD = P2C(SDRAM_TRRD);
  __writeMemory32(0x00000002, 0xFFE08054, "Memory");
  //EMCDYNAMICMRD = SDRAM_TMRD;
  __writeMemory32(0x00000003, 0xFFE08058, "Memory");

  //EMCDYNAMICCFG0 = 0x00004680;        // 13 row, 9 - col, SDRAM
  __writeMemory32(0x00004680, 0xFFE08100, "Memory");
  // JEDEC General SDRAM Initialization Sequence
  // DELAY to allow power and clocks to stabilize ~100 us
  // NOP
  //EMCDINAMICCTRL = 0x0183;
  __writeMemory32(0x00000183, 0xFFE08020, "Memory");
  //for(volatile Int32U i = 200*30; i;i--);
  __delay(1); // 1ms
  // PALL
  //EMCDINAMICCTRL_bit.I = 2;
  __writeMemory32(0x00000103, 0xFFE08020, "Memory");
  //EMCDINAMICRFR = 1;
  __writeMemory32(0x00000001, 0xFFE08024, "Memory");
  //for(volatile Int32U i= 128; i; --i); // > 128 clk
  __delay(1); // 1ms
  //EMCDINAMICRFR = P2C(SDRAM_REFRESH) >> 4;
  __writeMemory32(0x00000023, 0xFFE08024, "Memory");
  // COMM
  //EMCDINAMICCTRL_bit.I = 1;
  __writeMemory32(0x00000083, 0xFFE08020, "Memory");
  // Burst 4, Sequential, CAS-3
  //volatile unsigned long Dummy = *(volatile unsigned short *)
  //                                ((Int32U)&SDRAM_BASE_ADDR + (0x32UL << (13)));
  __readMemory32((0xA0000000 | (0x32UL << 13)), "Memory");
  // NORM
  //EMCDINAMICCTRL = 0x0000;
  __writeMemory32(0x00000000, 0xFFE08020, "Memory");
  //EMCDYNAMICCFG0_bit.B = 1;
  __writeMemory32(0x00084680, 0xFFE08100, "Memory");
  //for(volatile Int32U i = 10000; i;i--);
  __delay(1); // 1ms
}

clk_pll_init ()
{
__var Reg;
  // 1. Init OSC
  //SCS_bit.OSCRANGE = 0;
  //SCS_bit.OSCEN = 1;
  __writeMemory32(0x00000020, 0xE01FC1A0, "Memory");
  // 2.  Wait for OSC ready
  //while(!SCS_bit.OSCSTAT);
  __delay(40); // 40ms
  // 3. Disconnect PLL
  //PLLCON_bit.PLLC = 0;
  //Reg  = __readMemory32(0xE01FC080, "Memory");
  Reg = 3;
  Reg &= ~(1UL<<1);
  __writeMemory32(Reg, 0xE01FC080, "Memory");
  //PLLFEED = 0xAA;
  __writeMemory32(0x000000AA, 0xE01FC08C, "Memory");
  //PLLFEED = 0x55;
  __writeMemory32(0x00000055, 0xE01FC08C, "Memory");
  // 4. Disable PLL
  //PLLCON_bit.PLLE = 0;
  Reg &= ~(1UL<<0);
  __writeMemory32(Reg, 0xE01FC080, "Memory");
  //PLLFEED = 0xAA;
  __writeMemory32(0x000000AA, 0xE01FC08C, "Memory");
  //PLLFEED = 0x55;
  __writeMemory32(0x00000055, 0xE01FC08C, "Memory");
  // 5. Select source clock for PLL
  //CLKSRCSEL_bit.CLKSRC = 1; // Selects the main oscillator as a PLL clock source.
  __writeMemory32(0x00000001, 0xE01FC10C, "Memory");
  // 6. Set PLL settings 288 MHz
  //PLLCFG_bit.MSEL = 24-1;
  //PLLCFG_bit.NSEL = 2-1;
  __writeMemory32((24UL-1) | ((2UL-1)<<16), 0xE01FC084, "Memory");
  //PLLFEED = 0xAA;
  __writeMemory32(0x000000AA, 0xE01FC08C, "Memory");
  //PLLFEED = 0x55;
  __writeMemory32(0x00000055, 0xE01FC08C, "Memory");
  // 7. Enable PLL
  //PLLCON_bit.PLLE = 1;
  __writeMemory32(0x00000001, 0xE01FC080, "Memory");
  //PLLFEED = 0xAA;
  __writeMemory32(0x000000AA, 0xE01FC08C, "Memory");
  //PLLFEED = 0x55;
  __writeMemory32(0x00000055, 0xE01FC08C, "Memory");
  // 8. Wait for the PLL to achieve lock
  //while(!PLLSTAT_bit.PLOCK);
  __delay(1); // 1ms
  // 9. Set clk divider settings
  //CCLKCFG   = 4-1;            // 1/4 Fpll - 72 MHz
  __writeMemory32(4-1, 0xE01FC104, "Memory");
  //USBCLKCFG = 6-1;            // 1/6 Fpll - 48 MHz
  __writeMemory32(6-1, 0xE01FC108, "Memory");
  //PCLKSEL0 = PCLKSEL1 = 0;    // other peripherals - 18MHz (Fcclk/4)
  __writeMemory32(0, 0xE01FC1A8, "Memory");
  __writeMemory32(0, 0xE01FC1AC, "Memory");
  // 10. Connect the PLL
  //PLLCON_bit.PLLC = 1;
  __writeMemory32(0x00000003, 0xE01FC080, "Memory");
  //PLLFEED = 0xAA;
  __writeMemory32(0x000000AA, 0xE01FC08C, "Memory");
  //PLLFEED = 0x55;
  __writeMemory32(0x00000055, 0xE01FC08C, "Memory");
  
  // Configure AHB1 arbitration
  //AHBCFG1_bit.SHDL = 0;     // priority arbitration
  //AHBCFG1_bit.BB   = 0;     // Never break defined length bursts.
  //AHBCFG1_bit.QT   = 0;     // A quantum is an AHB clock.
  //AHBCFG1_bit.QT   = 4;     // Preemptive, re-arbitrate after 16 AHB quanta.
  //AHBCFG1_bit.DM   = 1;     // Master 1 (CPU) is the default master.
  //AHBCFG1_bit.EP1  = 1;     // External priority for master 1 (CPU).
  //AHBCFG1_bit.EP2  = 2;     // External priority for master 2 (GPDMA).
  //AHBCFG1_bit.EP3  = 3;     // External priority for master 3 (AHB1).
  //AHBCFG1_bit.EP4  = 5;     // External priority for master 4 (USB).
  //AHBCFG1_bit.EP5  = 4;     // External priority for master 5 (LCD).
  __writeMemory32(0x45321140, 0xE01FC188, "Memory");
  
}

execUserPreload()
{
  DisableLCD();
  // mamp SRAM at 0
  //MEMMAP = 0;
  __writeMemory32(0x00000002, 0xE01FC040, "Memory");
  clk_pll_init();
  sdram_init_init();
}

execUserReset()
{
  DisableLCD();
}